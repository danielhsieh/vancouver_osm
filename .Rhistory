View(residential_freq)
colnames(residential_freq)
median(residential_freq$area)
hist(residential_freq$area)
median(residential_freq$area,xlim=c(0,500))
hist(residential_freq$area,xlim=c(0,500))
hist(residential_freq$area,
xlim = c(0, 1000),
breaks = seq(0, 1000, by = 50),
xlab = "Area (m^2)",
ylab = "Frequency",
main = "Histogram of Residential Area")
hist(residential_freq$area,
xlim = c(0, 1000),
breaks = seq(0, 1100, by = 50),
xlab = "Area (m^2)",
ylab = "Frequency",
main = "Histogram of Residential Area")
hist(residential_freq$area,
xlim = c(0, 1000),
breaks = seq(0, 1100, by = 50),
xlab = "Area (m^2)",
ylab = "Frequency",
main = "Histogram of Residential Area")
hist(residential_freq$area,
breaks = seq(0, 2000, by = 100),
xlab = "Area (m^2)",
ylab = "Frequency",
main = "Histogram of Residential Area")
hist(residential_freq$area,
breaks = seq(0, 2000, by = 100),
xlab = "Area (m^2)",
ylab = "Frequency",
main = "Histogram of Residential Area")
hist(residential_freq$area,
breaks = 50)
hist(residential_freq$area,
breaks = 50,xlim=c(0,500))
hist(residential_freq$area,
breaks = 100,xlim=c(0,500))
hist(residential_freq$area,
breaks = 10,xlim=c(0,500))
hist(residential_freq$area,
breaks = 1000,xlim=c(0,500))
hist(residential_freq$area,
breaks = 10000,xlim=c(0,500))
residential_freq$touches<-as.character(st_touches(residential_freq))
class(residential_freq$touches)
levels(residential_freq$touches)
residential_freq$touches
tmap_mode("view")
tm_shape(residential_freq) +
tm_polygons("area", palette = "Blues", title = "Area")
View(ridership_vs_walkscore)
tmap_mode("plot")
tmap_mode("view")
tm_shape(residential_freq) +
tm_polygons("area", palette = "Blues", title = "Area")
tmap_mode("plot")
tm_shape(residential_freq) +
tm_polygons("area", palette = "Blues", title = "Area")
hist(residential_freq$area,
breaks = 10000,xlim=c(0,500))
boxplot(residential_freq$area,
breaks = 10000,xlim=c(0,500))
boxplot(residential_freq$area)
boxplot(residential_freq$area,ylim=c(0,500))
bins <- c(0, 100, 200, 300, 400, Inf)
residential_freq$area_bin <- cut(residential_freq$area, bins)
ggplot() +
geom_sf(data = residential_freq, aes(fill = area_bin)) +
scale_fill_manual(values = c("#999999", "#777777", "#555555", "#333333", "#111111")) +
labs(title = "Residential Building Areas", x = "Longitude", y = "Latitude")
tmap_mode("view")
ggplotly(ggplot() +
geom_sf(data = residential_freq, aes(fill = area_bin)) +
scale_fill_manual(values = c("#999999", "#777777", "#555555", "#333333", "#111111")) +
labs(title = "Residential Building Areas", x = "Longitude", y = "Latitude"))
boxplot(residential_freq$area,ylim=c(0,500))
ggplotly(ggplot() +
geom_sf(data = residential_freq, aes(fill = area_bin)) +
scale_fill_manual(values = c("#999999", "#777777", "#555555", "#333333", "#111111")) +
labs(title = "Residential Building Areas", x = "Longitude", y = "Latitude"))
quantile(residential_freq$area)
quantile(residential_freq$area)[1]
quantile(residential_freq$area)[4]
residential_freq$residential <- ifelse(residential_freq$area<300 & residential_freq$touches== "integer(0)", TRUE, FALSE)
residential_freq$residential <- ifelse(residential_freq$area < 300 & residential_freq$touches== "integer(0)", TRUE, FALSE)
residential_freq$residential <- ifelse(residential_freq$area < set_units(300, "m^2") & residential_freq$touches == "integer(0)", TRUE, FALSE)
class(residential_freq$area)
class(as.numeric(residential_freq$area))
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < set_units(300, "m^2") & residential_freq$touches == "integer(0)", TRUE, FALSE)
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < 300 & residential_freq$touches == "integer(0)", TRUE, FALSE)
View(residential_freq)
total_residential_area <- sum(subset(residential_freq,residential=TRUE))
total_residential_area <- sum(st_area(subset(residential_freq,residential=TRUE)))
total_building_area <- sum(residential_freq$area)
residential_area <- total_residential_area / total_building_area * 100
tm_shape(residential_freq) +
tm_polygons("residential", palette = "Blues", title = "Area")
ridership_vs_walkscore[1,]
ridership_vs_walkscore[,1]
ridership_vs_walkscore$names[,1]
ridership_vs_walkscore$name[,1]
ridership_vs_walkscore$name
ridership_vs_walkscore$Station
lon=ridership_vs_walkscore$lon[139]
lat=ridership_vs_walkscore$lat[139]
lat_long <- st_as_sf(
data.frame(lon=lon, lat =lat),
coords = c("lon", "lat"),
crs = 4326
)
residential_freq <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
residential_freq<-residential_freq$osm_polygons
residential_freq$area <- sf::st_area(residential_freq)
buffer<-st_buffer(lat_long,1000)
residential_freq<-st_intersection(residential_freq,buffer)
residential_freq$touches<-as.character(st_touches(residential_freq))
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < 300 & residential_freq$touches == "integer(0)", TRUE, FALSE)
total_floor_area <- sum(st_area(building_density) * building_density$building.levels)
total_residential_area <- sum(st_area(subset(residential_freq,residential=TRUE)))
total_building_area <- sum(residential_freq$area)
residential_area <- total_residential_area / total_building_area * 100
result=residential_area
get_residential_area<-function(lon,lat){
#create centre point as an sf_point
lat_long <- st_as_sf(
data.frame(lon=lon, lat =lat),
coords = c("lon", "lat"),
crs = 4326
)
#query OSM for buildings within 1km
residential_freq <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
#extra only polygons into a data.frame
residential_freq<-residential_freq$osm_polygons
#subset to remove unnecessary columns
#calculate area of each polygon
residential_freq$area <- sf::st_area(residential_freq)
#create a buffer 1km radius from the centre point
buffer<-st_buffer(lat_long,1000)
#remove objects that overlap with the buffer
residential_freq<-st_intersection(residential_freq,buffer)
residential_freq$touches<-as.character(st_touches(residential_freq))
#if area is more or less than the threshold, consider it residential
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < 300 & residential_freq$touches == "integer(0)", TRUE, FALSE)
# Calculate the total floor area of all buildings
total_residential_area <- sum(st_area(subset(residential_freq,residential=TRUE)))
total_building_area <- sum(residential_freq$area)
# Calculate the area ratio of detached homes to all other buildings in the area
residential_area <- total_residential_area / total_building_area * 100
#finish
result=residential_area
return(result)
}
require(osmdata)
require(dplyr)
require(sf)
require(leaflet)
require(tmap)
require(sfnetworks)
require(plotly)
ridership_vs_walkscore$residential_area<-mapply(get_residential_area,
ridership_vs_walkscore$lon,
ridership_vs_walkscore$lat)
colnames(ridership_vs_walkscore)
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="Vancouver"),aes(residential_area,
floor_area_ratio,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw())
ridership_vs_walkscore$Station
lon=ridership_vs_walkscore$lon[49]
lat=ridership_vs_walkscore$lat[49]
building_density <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
building_density<-building_density$osm_polygons
building_density$area <- sf::st_area(building_density)
ggplotly(ggplot() +
geom_sf(data = building_density, aes(fill = area_bin)) +
scale_fill_manual(values = c("#999999", "#777777", "#555555", "#333333", "#111111")) +
labs(title = "Floor Area Ratio of Buildings", x = "Longitude", y = "Latitude"))
ggplotly(ggplot() +
geom_sf(data = building_density, aes(fill=area)) +
scale_fill_manual(values = c("#999999", "#777777", "#555555", "#333333", "#111111")) +
labs(title = "Floor Area Ratio of Buildings", x = "Longitude", y = "Latitude"))
ggplotly(ggplot() +
geom_sf(data = building_density, aes(fill=area)) +
#scale_fill_manual(values = c("#999999", "#777777", "#555555", "#333333", "#111111")) +
labs(title = "Floor Area Ratio of Buildings", x = "Longitude", y = "Latitude"))
ggplotly(ggplot() +
geom_sf(data = building_density, aes(fill=as.numeric(area))) +
#scale_fill_manual(values = c("#999999", "#777777", "#555555", "#333333", "#111111")) +
labs(title = "Floor Area Ratio of Buildings", x = "Longitude", y = "Latitude"))
residential_freq <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
residential_freq<-residential_freq$osm_polygons
residential_freq$area <- sf::st_area(residential_freq)
#create a buffer 1km radius from the centre point
buffer<-st_buffer(lat_long,1000)
#remove objects that overlap with the buffer
residential_freq<-st_intersection(residential_freq,buffer)
residential_freq$touches<-as.character(st_touches(residential_freq))
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < 300 & residential_freq$touches == "integer(0)", TRUE, FALSE)
tm_shape(residential_freq) +
tm_polygons("residential", palette = "Blues", title = "Area")
View(residential_freq)
residential_freq <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
residential_freq<-residential_freq$osm_polygons
residential_freq$area <- sf::st_area(residential_freq)
tm_shape(residential_freq) +
tm_polygons("residential", palette = "Blues", title = "Area")
tm_shape(residential_freq) +
tm_polygons("area", palette = "Blues", title = "Area")
buffer<-st_buffer(lat_long,1000)
residential_freq<-st_intersection(residential_freq,buffer)
residential_freq$touches<-as.character(st_touches(residential_freq))
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < 300 & residential_freq$touches == "integer(0)", TRUE, FALSE)
residential_freq <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
#extra only polygons into a data.frame
residential_freq<-residential_freq$osm_polygons
#subset to remove unnecessary columns
#calculate area of each polygon
residential_freq$area <- sf::st_area(residential_freq)
#create a buffer 1km radius from the centre point
buffer<-st_buffer(lat_long,1000)
#remove objects that overlap with the buffer
residential_freq<-st_intersection(residential_freq,buffer)
residential_freq$touches<-as.character(st_touches(residential_freq))
residential_freq <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
#extra only polygons into a data.frame
residential_freq<-residential_freq$osm_polygons
#subset to remove unnecessary columns
#calculate area of each polygon
residential_freq$area <- sf::st_area(residential_freq)
#create a buffer 1km radius from the centre point
buffer<-st_buffer(lat_long,1000)
buffer<-st_buffer(lat_long,1000)
lat_long <- st_as_sf(
data.frame(lon=lon, lat =lat),
coords = c("lon", "lat"),
crs = 4326
)
buffer<-st_buffer(lat_long,1000)
residential_freq<-st_intersection(residential_freq,buffer)
residential_freq$touches<-as.character(st_touches(residential_freq))
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < 300 & residential_freq$touches == "integer(0)", TRUE, FALSE)
tm_shape(residential_freq) +
tm_polygons("residential", palette = "Blues", title = "Area")
total_residential_area <- sum(st_area(subset(residential_freq,residential=TRUE)))
total_building_area <- sum(residential_freq$area)
total_residential_area <- sum(residential_freq$area[residential_freq$residential == TRUE])
total_building_area <- sum(residential_freq$area)
residential_area <- total_residential_area / total_building_area * 100
get_residential_area<-function(lon,lat){
#create centre point as an sf_point
lat_long <- st_as_sf(
data.frame(lon=lon, lat =lat),
coords = c("lon", "lat"),
crs = 4326
)
#query OSM for buildings within 1km
residential_freq <- opq_around (lon, lat,
1000,
key="building",
timeout=5000) %>%
osmdata_sf ()
#extra only polygons into a data.frame
residential_freq<-residential_freq$osm_polygons
#subset to remove unnecessary columns
#calculate area of each polygon
residential_freq$area <- sf::st_area(residential_freq)
#create a buffer 1km radius from the centre point
buffer<-st_buffer(lat_long,1000)
#remove objects that overlap with the buffer
residential_freq<-st_intersection(residential_freq,buffer)
residential_freq$touches<-as.character(st_touches(residential_freq))
#if area is more or less than the threshold, consider it residential
residential_freq$residential <- ifelse(as.numeric(residential_freq$area) < 300 & residential_freq$touches == "integer(0)", TRUE, FALSE)
# Calculate the total floor area of all buildings
total_residential_area <- sum(residential_freq$area[residential_freq$residential == TRUE])
total_building_area <- sum(residential_freq$area)
# Calculate the area ratio of detached homes to all other buildings in the area
residential_area <- total_residential_area / total_building_area * 100
#finish
result=residential_area
return(result)
}
ridership_vs_walkscore$residential_area<-mapply(get_residential_area,
ridership_vs_walkscore$lon,
ridership_vs_walkscore$lat)
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="Toronto"),aes(residential_area,
floor_area_ratio,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="Toronto"),aes(residential_area,
DailyBoardings_2019,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore),aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore),aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw()) +
labs(title = "Area of Detached Homes vs. Metro Ridership",
x = "% Building Area of Detached Homes",
y = "Daily Weekday Boarding (2019)")
ggplotly(ggplot(subset(ridership_vs_walkscore),aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw()) +
labs(title = "Area of Detached Homes vs. Metro Ridership",
x = "% Building Area of Detached Homes",
y = "Daily Weekday Boarding (2019)")
ggplotly(ggplot(subset(ridership_vs_walkscore),aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore),aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw()) +
labs(title = "Area of Detached Homes vs. Metro Ridership")
ggplotly(ggplot(ridership_vs_walkscore,aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("Station:",Station,
"<br>DailyBoardings_2019",DailyBoardings_2019))) +
geom_point() +
theme_bw()) +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Daily Weekday Boarding (2019)")
ggplotly(ggplot(ridership_vs_walkscore,aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Walk Score",walk_score))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Daily Weekday Boarding (2019)") +
theme_bw())
ggplotly(ggplot(residential_freq[residential_freq$city == "Toronto"],aes(residential_area, #,city=="Toronto"
DailyBoardings_2019,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Walk Score",walk_score))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Daily Weekday Boarding (2019)")+
theme_bw())
residential_freq[residential_freq$city == "Toronto"
]
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="Toronto"),aes(residential_area, #
DailyBoardings_2019,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Walk Score",walk_score))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Daily Weekday Boarding (2019)")+
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="Vancouver"),aes(residential_area, #
DailyBoardings_2019,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Walk Score",walk_score))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Daily Weekday Boarding (2019)")+
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="Vancouver"),aes(residential_area, #
walk_score,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Daily Boardings (2019)",DailyBoardings_2019))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="Toronto"),aes(residential_area, #
walk_score,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Daily Boardings (2019)",DailyBoardings_2019))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="vancouver"),aes(residential_area, #
walk_score,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Daily Boardings (2019)",DailyBoardings_2019))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="vancouver"),aes(residential_area, #
walk_score,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station,
"<br>Daily Boardings (2019)",DailyBoardings_2019))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw())
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="vancouver"),aes(residential_area, #
walk_score,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station
))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw())
View(ridership_vs_walkscore)
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="vancouver")),
aes(residential_area, #
walk_score,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw()
gc()
ggplotly(ggplot(subset(ridership_vs_walkscore,city=="vancouver")),
aes(residential_area, #
walk_score,
col=Line,
text=paste("City:",Station,
"<br>Station:",Station))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw()
p<-ggplot(subset(ridership_vs_walkscore,city=="vancouver")),
p<-ggplot(subset(ridership_vs_walkscore,city=="vancouver"),aes(residential_area,walk_score,col=Line,text=paste("City:",Station,"<br>Station:",Station))) +
geom_point() +
labs(title = "Area of Detached Homes vs. Metro Ridership",x = "% Building Area of Detached Homes",y = "Walk Score")+
theme_bw()
ggplotly(p)
p <-ggplot(ridership_vs_walkscore,aes(walk_score,
residential_area,
col=Line,
text=paste("Station:",Station))) +
geom_point() +
theme_bw()
ggplotly(p)
tm_shape(ridership_vs_walkscore) +
tm_dots(col="Line",size="1",palette="RG")
tm_shape(ridership_vs_walkscore) +
tm_dots(col="Line",size=1,palette="RG")
tm_shape(ridership_vs_walkscore) +
tm_dots(col="Line",size=1)
tmap_mode("view")
tm_shape(ridership_vs_walkscore) +
tm_dots(col="Line",size=1)
tm_shape(subset(ridership_vs_walkscore,city == "Vancouver")) +
tm_dots(col="Line",size=1)
tm_shape(subset(ridership_vs_walkscore,city == "Vancouver")) +
tm_dots(col="Line",size="residential_area")
